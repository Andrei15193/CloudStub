name: Build & Publish

on:
  push:
    branches:
      - dev

defaults:
  run:
    shell: pwsh

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      cloud_stub_release: ${{ steps.releases.outputs.cloud_stub_release }}
      cloud_stub_release_name: ${{ steps.releases.outputs.cloud_stub_release_name }}
      cloud_stub_release_next_version: ${{ steps.releases.outputs.cloud_stub_release_next_version }}
      cloud_stub_release_next_assembly_version: ${{ steps.releases.outputs.cloud_stub_release_next_assembly_version }}
      cloud_stub_release_next_tag: ${{ steps.releases.outputs.cloud_stub_release_next_tag }}
      cloud_stub_release_latest_release_ref: ${{ steps.releases.outputs.cloud_stub_release_latest_release_ref }}

      cloud_stub_azure_cosmos_table_release: ${{ steps.releases.outputs.cloud_stub_azure_cosmos_table_release }}
      cloud_stub_azure_cosmos_table_release_name: ${{ steps.releases.outputs.cloud_stub_azure_cosmos_table_release_name }}
      cloud_stub_azure_cosmos_table_release_next_version: ${{ steps.releases.outputs.cloud_stub_azure_cosmos_table_release_next_version }}
      cloud_stub_azure_cosmos_table_release_next_assembly_version: ${{ steps.releases.outputs.cloud_stub_azure_cosmos_table_release_next_assembly_version }}
      cloud_stub_azure_cosmos_table_release_next_tag: ${{ steps.releases.outputs.cloud_stub_azure_cosmos_table_release_next_tag }}
      cloud_stub_azure_cosmos_table_release_latest_release_ref: ${{ steps.releases.outputs.cloud_stub_azure_cosmos_table_release_latest_release_ref }}

    steps:
    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x

    - name: Checkout sources
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Restore
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Test
      run: dotnet test --configuration Release --no-build --verbosity normal

    - name: Determine Releases
      id: releases
      if: contains(toJSON(github.event.commits.*.message), '[release]')
      run: |
        function Get-ReleaseInformation([string]$name, [string]$workflowVariablePrefix, [string]$tagPrefix, [string]$baseVersion) {
          $tagFilter = "^$(([regex]::Escape("$tagPrefix-$baseVersion")))\.\d+$"
          $latestIncrement = git tag --list "$tagPrefix-$baseVersion.*" `
            | Where-Object { $_ -match $tagFilter } `
            | ForEach-Object {
              $_ -split "\." `
              | Select-Object -Last 1 `
              | ForEach-Object { $_ -as [int] }
            } `
            | Sort-Object -Descending `
            | Select-Object -First 1

          $nextVersion = if ($latestIncrement -eq $null) { if ($baseVersion -match "^\d+\.\d+$") { "$baseVersion.0" } else { "$baseVersion.1" } } else { "$baseVersion.$($latestIncrement + 1)" }
          $latestReleaseRef = if ($latestIncrement -eq $null) { $null | git hash-object -t tree --stdin } else { "$tagPrefix-$baseVersion.$latestIncrement" }

          $prerelease_name_offsets = @{
            "alpha" = 1000;
            "beta" = 2000;
            "rc" = 3000;
          }
          $nextAssemblyVersion = $nextVersion -replace "^(?<major>\d+)\.(?<minor>\d+)\.(?<patch>\d+)(?<prerelease>-(?<prerelease_name>.+)\.(?<prerelease_increment>\d+))?$", {
              @(
                $_.Groups["major"].Value
                $_.Groups["minor"].Value
                if ($_.Groups["prerelease"].Success) {
                    if ($prerelease_name_offsets.ContainsKey($_.Groups["prerelease_name"].Value)) {
                      ($_.Groups["prerelease_increment"].Value -as [int]) + $prerelease_name_offsets[$_.Groups["prerelease_name"].Value]
                    }
                    else {
                      ($_.Groups["prerelease_increment"].Value -as [int]) + ($prerelease_name_offsets.Values | Sort-Object -Descending | Select-Object -First 1) + 1000
                    }
                }
                else {
                  "0"
                }
                $_.Groups["patch"].Value
              ) -join "."
            }

          return @{
            Name = $name;
            WorkflowVariablePrefix = $workflowVariablePrefix;
            NextVersion = $nextVersion;
            NextAssemblyVersion = $nextAssemblyVersion;
            NextTag = "$tagPrefix-$nextVersion";
            LatestReleaseRef = $latestReleaseRef
          }
        }

        function Set-CreateProjectReleaseOutput($releaseInformation) {
          Write-Output "::set-output name=$($releaseInformation.WorkflowVariablePrefix)_release::yes"
          Write-Output "::set-output name=$($releaseInformation.WorkflowVariablePrefix)_release_name::$($releaseInformation.Name)"
          Write-Output "::set-output name=$($releaseInformation.WorkflowVariablePrefix)_release_next_version::$($releaseInformation.NextVersion)"
          Write-Output "::set-output name=$($releaseInformation.WorkflowVariablePrefix)_release_next_assembly_version::$($releaseInformation.NextAssemblyVersion)"
          Write-Output "::set-output name=$($releaseInformation.WorkflowVariablePrefix)_release_next_tag::$($releaseInformation.NextTag)"
          Write-Output "::set-output name=$($releaseInformation.WorkflowVariablePrefix)_release_latest_release_ref::$($releaseInformation.LatestReleaseRef)"
        }

        $cloudStubBaseVersion = Select-Xml -Path .\CloudStub\CloudStub.csproj -XPath "//Project/PropertyGroup/BaseVersion" `
          | Select-Object -ExpandProperty Node `
          | Select-Object -Property InnerText -ExpandProperty InnerText `
          | ForEach-Object { $_.Trim() }
        $cloudStubReleaseInformation = Get-ReleaseInformation "CloudStub" "cloud_stub" "cloud-stub" $cloudStubBaseVersion

        $cloudStubAzureCosmosTableBaseVersion = Select-Xml -Path .\CloudStub.Azure.Cosmos.Table\CloudStub.Azure.Cosmos.Table.csproj -XPath "//Project/PropertyGroup/BaseVersion" `
          | Select-Object -ExpandProperty Node `
          | Select-Object -Property InnerText -ExpandProperty InnerText `
          | ForEach-Object { $_.Trim() }
        $cloudStubAzureCosmosTableReleaseInformation = Get-ReleaseInformation "Cloud Stub Azure Cosmos Table" "cloud_stub_azure_cosmos_table" "cloud-stub-azure-cosmos-table" $cloudStubAzureCosmosTableBaseVersion

        if (git diff $cloudStubReleaseInformation.LatestReleaseRef -- "CloudStub/") {
          Set-CreateProjectReleaseOutput $cloudStubReleaseInformation
          Set-CreateProjectReleaseOutput $cloudStubAzureCosmosTableReleaseInformation
        }
        else {
          if (git diff $cloudStubAzureCosmosTableReleaseInformation.LatestReleaseRef -- "CloudStub.Azure.Cosmos.Table/") {
            Set-CreateProjectReleaseOutput $cloudStubAzureCosmosTableReleaseInformation
          }
        }

  create-cloud-stub-release:
    name: Create CloudStub Release
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.cloud_stub_release == 'yes'
    steps:
    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x

    - name: Checkout Sources
      uses: actions/checkout@v3

    - name: Create CloudStub Release
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      run: |
        [Convert]::FromBase64String("${{ secrets.KeyFile }}") | Set-Content ./CloudStub.snk -AsByteStream

        dotnet pack CloudStub/CloudStub.csproj `
          --configuration Release `
          --output Publish `
          -property:Version=${{ needs.build.outputs.cloud_stub_release_next_assembly_version }} `
          -property:PackageVersion=${{ needs.build.outputs.cloud_stub_release_next_version }} `
          -property:RepositoryCommit=${{ github.event.head_commit.id }} `
          -property:SignAssembly=True `
          -property:AssemblyOriginatorKeyFile=../CloudStub.snk

        $projectDescription = Select-Xml -Path ./CloudStub/CloudStub.csproj -XPath "//Project/PropertyGroup/Description" `
          | Select-Object -ExpandProperty Node `
          | Select-Object -Property InnerText -ExpandProperty InnerText `
          | ForEach-Object {
            ($_ -replace "`r", "" -split "`n" `
              | Where-Object { -not [string]::IsNullOrWhiteSpace($_) } `
              | ForEach-Object { $_.Trim() }) -join " "
          }
        $projectReleaseNotes = Select-Xml -Path ./CloudStub/CloudStub.csproj -XPath "//Project/PropertyGroup/PackageReleaseNotes" `
          | Select-Object -ExpandProperty Node `
          | Select-Object -Property InnerText -ExpandProperty InnerText `
          | ForEach-Object {
            ($_ -replace "`r", "" -split "`n" `
              | Where-Object { -not [string]::IsNullOrWhiteSpace($_) } `
              | ForEach-Object { $_.Trim() }) -join "`n"
          }

        $releaseNotes = @"
        $projectDescription

        #### Release Notes
        $projectReleaseNotes
        "@

        gh release create "${{ needs.build.outputs.cloud_stub_release_next_tag }}" `
          --title "${{ needs.build.outputs.cloud_stub_release_name }} ${{ needs.build.outputs.cloud_stub_release_next_version }}" `
          --target "${{ github.event.head_commit.id }}" `
          --notes $releaseNotes `
          @(if ("${{ needs.build.outputs.cloud_stub_release_next_tag }}" -match "-.+\.\d+$") { "--prerelease" } else { "" }) `
          "./Publish/CloudStub.${{ needs.build.outputs.cloud_stub_release_next_version }}.nupkg"

  create-cloud-stub-azure-cosmos-table-release:
    name: Create CloudStub.Azure.Cosmos.Table Release
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.cloud_stub_azure_cosmos_table_release == 'yes'
    steps:
    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x

    - name: Checkout Sources
      uses: actions/checkout@v3

    - name: Create CloudStub.Azure.Cosmos.Table Release
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      run: |
        [Convert]::FromBase64String("${{ secrets.KeyFile }}") | Set-Content ./CloudStub.snk -AsByteStream

        dotnet pack CloudStub.Azure.Cosmos.Table/CloudStub.Azure.Cosmos.Table.csproj `
          --configuration Release `
          --output Publish `
          -property:Version=${{ needs.build.outputs.cloud_stub_azure_cosmos_table_release_next_assembly_version }} `
          -property:PackageVersion=${{ needs.build.outputs.cloud_stub_azure_cosmos_table_release_next_version }} `
          -property:RepositoryCommit=${{ github.event.head_commit.id }} `
          -property:SignAssembly=True `
          -property:AssemblyOriginatorKeyFile=../CloudStub.snk

        $projectDescription = Select-Xml -Path ./CloudStub.Azure.Cosmos.Table/CloudStub.Azure.Cosmos.Table.csproj -XPath "//Project/PropertyGroup/Description" `
          | Select-Object -ExpandProperty Node `
          | Select-Object -Property InnerText -ExpandProperty InnerText `
          | ForEach-Object {
            ($_ -replace "`r", "" -split "`n" `
              | Where-Object { -not [string]::IsNullOrWhiteSpace($_) } `
              | ForEach-Object { $_.Trim() }) -join " "
          }
        $projectReleaseNotes = Select-Xml -Path ./CloudStub.Azure.Cosmos.Table/CloudStub.Azure.Cosmos.Table.csproj -XPath "//Project/PropertyGroup/PackageReleaseNotes" `
          | Select-Object -ExpandProperty Node `
          | Select-Object -Property InnerText -ExpandProperty InnerText `
          | ForEach-Object {
            ($_ -replace "`r", "" -split "`n" `
              | Where-Object { -not [string]::IsNullOrWhiteSpace($_) } `
              | ForEach-Object { $_.Trim() }) -join "`n"
          }

        $releaseNotes = @"
        $projectDescription

        #### Release Notes
        $projectReleaseNotes
        "@

        gh release create "${{ needs.build.outputs.cloud_stub_azure_cosmos_table_release_next_tag }}" `
          --title "${{ needs.build.outputs.cloud_stub_azure_cosmos_table_release_name }} ${{ needs.build.outputs.cloud_stub_azure_cosmos_table_release_next_version }}" `
          --target "${{ github.event.head_commit.id }}" `
          --notes $releaseNotes `
          @(if ("${{ needs.build.outputs.cloud_stub_azure_cosmos_table_release_next_tag }}" -match "-.+\.\d+$") { "--prerelease" } else { "" }) `
          "./Publish/CloudStub.Azure.Cosmos.Table.${{ needs.build.outputs.cloud_stub_azure_cosmos_table_release_next_version }}.nupkg"